datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model project {
  id   String  @id @default(uuid())
  name String?

  owner_id String

  memberships membership[]

  @@map("projects")
}

model membership {
  project    project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String

  user_id String

  inserted_at DateTime @default(now()) @db.Date

  @@id([project_id, user_id])
  @@map("memberships")
}

model datatypes {
  c_uuid        String   @id @db.Uuid
  c_text        String
  c_int         Int
  c_int2        Int      @db.SmallInt
  c_int4        Int
  c_int8        BigInt   @db.BigInt
  c_float4      Float    @db.Real 
  c_float8      Float
  c_bool        Boolean
  c_date        DateTime @db.Date
  c_time        DateTime @db.Time
  c_timestamp   DateTime @db.Timestamp(6)
  c_timestamptz DateTime @db.Timestamptz(6)
  c_json        Json     @db.Json
  c_jsonb       Json     @db.JsonB
}

model weirdnames {
  c_uuid String @id @db.Uuid
  val    String @map("1val")
  text   String
  braces   Json @default("{}") @db.Json
  int  integer?  // int used as column name, not type
}

model GenOpts {
  id Int
  value String
  timestamp   DateTime @db.Timestamptz(6)
}

model TableWithCustomRowClass {
  id    Int
  value String
  d     Float    @db.Real 
}


model enums {
  id String                       @id
  c  Unsupported("public.color")?
}

enum color {
  RED
  GREEN
  BLUE
}

// Just using an enum name with conflics
enum integer {
  int
  Bool
  DOUBLE
  Float  @map("2Float")
  _some_val
  value         @map("01 value")
  value         @map("2 value")
  value         @map("2Value")
  rd_value      @map("3rd value")
  WeIRd_Stu_ff_ @map("WeIRd*Stu(ff)")
}

enum snake_case_enum {
  v1
  v2
}

model User {
  id      Int      @id
  name    String?
  posts   Post[]
  profile Profile?
}

model Post {
  id        Int    @id
  title     String @unique
  contents  String
  nbr       Int?
  authorId  Int
  author    User?  @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int    @id
  bio    String
  userId Int    @unique
  user   User?  @relation(fields: [userId], references: [id])
}