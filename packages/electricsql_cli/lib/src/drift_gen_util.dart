import 'package:code_builder/code_builder.dart';

import 'package:electricsql_cli/src/commands/generate/builder/util.dart';

/// Generates: <columnBuilder>.clientDefault(() => <value>) to chain with the
/// other drift column modifiers.
/// [columnBuilder] is the base [ColumnBuilder] expression from drift that gets modified
/// [value] is the value expression to be returned by the [clientDefault] closure.
///
/// Common usage would be if you have a `.clientDefault(() => DateTime.now())` in your
/// drift schema.
/// That can be defined as follows:
///
/// ```dart
/// clientDefaultExpression(
///   columnBuilder,
///   value: dateTimeNowExpression,
/// );
/// ```
///
/// If you need a custom value expression, refer to how to create expressions with the
/// [code_builder](https://pub.dev/packages/code_builder) package.
Expression clientDefaultExpression(
  Expression columnBuilder, {
  required Expression value,
}) {
  // generates: () => <value>
  final closure = Method(
    (b) => b..body = value.code,
  ).closure;

  // generates: <columnBuilder>.clientDefault(() => <value>)
  return columnBuilder.property('clientDefault').call(
    [closure],
  );
}

/// Returns the Expression that builds `DateTime.now()`
Expression get dateTimeNowExpression {
  final nowExpression = refer('DateTime').property('now').call([]);
  return nowExpression;
}

/// Generates the [DataClassName] annotation from drift. https://pub.dev/documentation/drift/latest/drift/DataClassName-class.html
///
/// [name] is the name of the data class
///
/// [extending] is the [code_builder] [Reference] to the parent type of the data class generated by drift.
/// For example: `refer('BaseModel', 'package:myapp/base_model.dart')`
///
/// Usage examples:
///
/// ```dart
/// dataClassAnnotation('SampleName')
/// dataClassAnnotation('SampleName', extending: refer('BaseModel', 'package:myapp/base_model.dart'))
/// ```
Expression dataClassNameAnnotation(
  String name, {
  Reference? extending,
}) {
  // @DataClassName("SampleName", extending: BaseModel)
  final String dataClassName = name;
  final Reference? extendingRef = extending;
  final dataclassAnotation = refer('DataClassName', kDriftImport).call([
    literal(dataClassName),
  ], {
    if (extendingRef != null) 'extending': extendingRef,
  });

  return dataclassAnotation;
}

/// Generates the [UseRowClass] annotation from drift. 
/// 
/// API: https://pub.dev/documentation/drift/latest/drift/UseRowClass-class.html
/// 
/// Docs: https://drift.simonbinder.eu/docs/advanced-features/custom_row_classes
/// 
/// [type] is the [code_builder] [Reference] to the custom row class.
/// 
/// [constructor] is the name of the constructor that drift will use to map the rows.
/// 
/// Usage examples:
/// 
/// ```dart
/// useRowClassAnnotation(refer('MyCustomRowClass', 'package:myapp/custom_row_class.dart'))
/// useRowClassAnnotation(refer('MyCustomRowClass', 'package:myapp/custom_row_class.dart'), constructor: 'fromDb')
/// ```
Expression useRowClassAnnotation(
  Reference type, {
  String? constructor,
}) {
  // @UseRowClass(SomeClass, constructor: 'fromDb')
  final annotation = refer('UseRowClass', kDriftImport).call([
    type,
  ], {
    if (constructor != null) 'constructor': literal(constructor),
  });

  return annotation;
}
