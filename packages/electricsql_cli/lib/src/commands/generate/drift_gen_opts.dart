import 'package:code_builder/code_builder.dart';

abstract class ElectricDriftGenOpts {
  ElectricDriftGenOpts({
    this.int8AsBigInt,
  });

  /// Customize the way the Drift Table class is generated
  /// Returning null means use the default
  /// [sqlTableName] is the name of the table in the database
  DriftTableGenOpts? tableGenOpts(String sqlTableName) {
    return null;
  }

  /// Customize the way the Drift Table class is generated
  /// Returning null means use the default
  /// [sqlTableName] is the name of the table in the database
  /// [sqlColumnName] is the name of the column in the database
  DriftColumnGenOpts? columnGenOpts(String sqlTableName, String sqlColumnName) {
    return null;
  }

  /// Whether to use BigInt Dart type for INT8 columns.
  /// If you need to support values larger than 2^52 on web, you need
  /// to set this to true.
  /// If you are not targetting the web, all INT8 space fits in regular Dart integers.
  /// More information: https://drift.simonbinder.eu/docs/getting-started/advanced_dart_tables/#bigint-support
  final bool? int8AsBigInt;
}

class DriftTableGenOpts {
  /// Customize the way the Drift table name class is generated
  /// Returning null means use the default
  final String? driftTableName;

  /// Customize the way the Drift data class is generated
  /// Returning null means use the default
  @Deprecated(
    'Use `annotations` + the `dataClassNameAnnotation` utility function instead',
  )
  final DataClassNameInfo? dataClassName;

  /// Annotations for the drift table schema. Mainly for the `DataClassName` and `UseRowClass` drift annotations.
  /// You can use the following utility functions to generate them: `dataClassNameAnnotation` and `useRowClassAnnotation`.
  final List<Expression> annotations;

  DriftTableGenOpts({
    this.driftTableName,
    @Deprecated(
      'Use `annotations` + the `dataClassNameAnnotation` utility function instead',
    )
    this.dataClassName,
    this.annotations = const [],
  });
}

/// A function that takes a [ColumnBuilder] expression from drift and returns a modified
/// [ColumnBuilder] expression.
typedef ColumnBuilderModifier = Expression Function(Expression columnBuilder);

class DriftColumnGenOpts {
  /// Customize the way the Drift column name class is generated
  /// Returning null means use the default
  final String? driftColumnName;

  /// Customize the way the Drift column definition is generated
  /// Returning null means use the default
  ///
  /// One common use case could be including a `.clientDefault(() => DateTime.now())` in your
  /// drift schema.
  /// That can be defined as follows:
  ///
  /// ```dart
  /// (baseColumnBuilder) => clientDefaultExpression(
  ///   baseColumnBuilder,
  ///   value: dateTimeNowExpression,
  /// )
  /// ```
  final ColumnBuilderModifier? columnBuilderModifier;

  DriftColumnGenOpts({
    this.driftColumnName,
    this.columnBuilderModifier,
  });
}

/// Options to customize how the [DataClassName] from drift annotation is generated
class DataClassNameInfo {
  /// The name of the data class
  final String name;

  /// The [code_builder] [Reference] to the parent type of the data class generated by drift.
  /// For example: `refer('BaseModel', 'package:myapp/base_model.dart')`
  final Reference? extending;

  DataClassNameInfo(
    this.name, {
    this.extending,
  });
}
